/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//s0xAAAAAABpBQAACDZCGSzPHAAAYDAQAFAADBACAA/4o3A1dqxjzMfo/1qLhMgs0E2tkWP9g8YMXYG5cvhMBTvnkz//o/u///6FYAQCAAAAADNYVNY0Zn9dME6CkzRhiHUwR8UqMmXYRjBTQUgwTAExMnNASTAAQCEw5wKkMBoABxoFxMBFAKjAKgD1SRg//s0xCIADIxFJpn8AAE5hiQDvpAAKwAA4TXyYiQrnRKgkk/bv2tVeY32M6M/V7Nn/+1We7lmBJAxJgSACAYhyICGJWiDxj+5eEbbYTtmJDCHphewLWCgdEwFgBIMA3AljAmQGQwDUAuGgGMwBgANWS9MoACFg0XQvcfYxv/d7v///I+pIAFIAMxRUOQZAN6w//s0xAYAR1QxIG77QkEKCOo1nCVmeMoHbMI4r4/fB+zGhDkHANwMRME4DdwkBMCcCiFFtp1Wmx7zKtirv////0f+r0AAFu7/bUA0FTo5sjqGTnMacVWOI4VXCPDhfHIAfRBdToSalcZhBdhFEyhTSQZBU0EBfBxIvNuWJ6tGjBxMMAR/iAuqAAAL12rgAABc//s0xASCB5hLTazxg7Dfhue1ruBOE4FwZadOwVD5qb6mFS2GEUMB0CopP+vZ3oik84VtIV2n+JgPC8ugZxq0Z/l15VckGtf2KAbgCQpABkQBukx8QBnpoWDYyQ8g1BIBHIWUmel8OLHgz1K3tLhIbdWW/3splqzv6/kf//1s9X9VAI6CsEAYskHh4RozyZqJ//s0xAeCBwQpKu33IlDRBOX1rmhGmSgtny7inKg+GPIaj6AKMMMsUmDpqZ8Eoqs7q2FKclnv+/6/4x/b//eUXZm5EQAYQNvKNDYNrIMSk8956zzOwuMRDSTagrEweWRqCt2sopAsZwEmp3p/O//U/yv9agAALlbVJAAR40pE8B03AkwUFg03o4J/TBfxiMOq//s0xA6CBjghI013IjESnuHpvxRmAtBpO1zpSyTnckeI2ev9X9T/+z+wA3inQQBDbngRptSqbY+mD0D2YLS6JhZALpdjwCqFDwpSDQEzuykEFDSy9lWV99XFXzMn/q1/24s3/+MDe/J/9f/+JfI1AAAqZI0gAhgmFumKJgLYYliYa2XsaShmHCIWnTHDGAmw//s0xBCCBrgjD0114rCyg6K1vCSOLMWLHo56mOpdTxnySPt/kb6X+r+sBS3WWtgNZXSxVDuYYMHTnBu4mGvSMCsSE2osx74PvQD5tRxP3ddD//kv//1KAC0UAMhTcSyBKAbWRG+c56jKOhQ4dA5wC0QNsqoYnVgq5RKoGqgar/6Nn9dMQU1FMy45OS41VVVV//s0xByDxXwi9s3hJnAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//s0xEQDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xIGDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xL8DwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xMIDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;