/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//swxAAAAAAAABQAACDeBGg3PAZCQbFpY1Hg1Ao3Ag3AAA7xfSFBsBPCG68lJn7luIZ1QtpheAH5/d+TvQjtXlL/6vvLi//f/RptQQUALv3Y2UoCwRQZgodxrCkcmeMNGYoQXZgwAjgYElMEuUsVOpfymURt8zwVltxJ+NFntXsrp5L6hTLuL/t/9FFPEP10+SqJfsrfcADHFdHo//syxCeACTSxN13igDDVA6e1zuAG4UmDHIINN1M+2wsgG8N4l+HNIjDCEAjhwBNyoKPNLEMnW/dR0RZ/+/na//7d/7fcMNOHvTAdCow4GfjAMJ2Gtjj1DzI8/DFsgzJUZDCEFyYGwwGZlBwgWLqn8U/L7//1vzhnyP//9A/xN//Xp/UGqBkAE6DV/uzGypTJWnAkx3IJbPBahGimLv/7MsQsAgfEsxIP9OLA1QPjNd/sADA6FiwE5LZ2oxa7x6aN1Oj+pO//q2//r2/9snUAAAOwDsUSYGEuAmJiIIV0YUIzBGLjgNp/40mWxEe5CC7xjgBdxDrBWxcQrLJqyOWt9qm7+/3lc9/+vJf/STQ6LBUtQGoxhvQObZ0CaCAQAwyKlY7wQ/K7Atm1pYnZr3/Jbsi7bLJzv+92vR//+zLENgIHtBsRr/NCAL8C5L2+5Ab9CgAAABAKhhpALCUBhLglGah8O8mHnhzp2bVHBTeeBUbGObZEZIcAjaEELRNuWwrkcdLe5ZLbnn1Z1We+nc1EC6PyvkAAAE8DABAaMXlIo335MDdRMyMSQWMwPQsjFcQQ8MGlMSHEjiB6oGrtBac7r/O1AMkj4IDhA8YGHESRpxZR9xeLAQLB//swxEMCCFga+6/zQgFgil5N7RioUVEYZMAUKsFSRo0/0dv1sp/Q/V/TSbbbluuwAAApammyW39iP9LRfSyUl/8rV/6qVUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//syxDkDw2gBAaCEYDgAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7MsRvA8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+zLEswPAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//swxLwDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//syxLuDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7MsS7g8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;