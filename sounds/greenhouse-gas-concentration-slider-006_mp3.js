/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//s0xF4DwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xJuDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xMIDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xMIDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;