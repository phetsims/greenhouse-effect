/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVV//s0xCyDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xGoDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xKeDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//s0xMIDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;