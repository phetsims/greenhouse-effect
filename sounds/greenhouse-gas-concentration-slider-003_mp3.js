/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;